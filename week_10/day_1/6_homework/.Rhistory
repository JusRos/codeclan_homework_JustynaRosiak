library(tidyverse)
# load thea data
project <- read_csv("data/project_management.csv")
View(project)
library(tidyverse)
# load thea data
project <- read_csv("data/project_management.csv")
project <- project %>%
select(-...1)
View(project)
View(project)
# Plot the data, taking estimated_length as the independent variable and actual_length as the dependent variable.
project %>%
ggplot(aes(estimated_length, actual_length))+
geom_point()
project %>%
ggplot(aes(estimated_length, actual_length))+
geom_point()+
geom_point(aes(x = mean(estimated_length), y = mean(actual_length)))
project %>%
ggplot(aes(estimated_length, actual_length))+
geom_point()+
geom_point(aes(x = mean(estimated_length), y = mean(actual_length)))
# Plot the data, taking estimated_length as the independent variable and actual_length as the dependent variable.
project %>%
ggplot(aes(estimated_length, actual_length))+
geom_point()+
geom_point(aes(x = mean(estimated_length), y = mean(actual_length), colour = "red", size = 3))
project %>% summarise(correlation = cor(estimated_length, y = actual_length))
lm(formula = actual_length ~ estimated_length)
# Perform a simple linear regression using actual_length as the dependent variable, and estimated_length as the independent variable. Save the model object to a variable.
lm(formula = actual_length ~ estimated_length, data = project)
# Perform a simple linear regression using actual_length as the dependent variable, and estimated_length as the independent variable. Save the model object to a variable.
model <- lm(formula = actual_length ~ estimated_length, data = project)
fitted(model)
?lm()
library(modelr)
model %>%
add_predictions(model) %>%
add_residuals(model)
library(modelr)
model %>%
add_predictions(project) %>%
add_residuals(project)
project %>%
add_predictions(model) %>%
add_residuals(model)
library(modelr)
sample <- project %>%
add_predictions(model) %>%
add_residuals(model)
sample
sample %>%
ggplot(aes(x = estimated_length))+
geom_point( aes(y = actual_length))+
geom_line(aes(y = pred), col = "red")
# Perform a simple linear regression using actual_length as the dependent variable, and estimated_length as the independent variable. Save the model object to a variable.
model <- lm(formula = actual_length ~ estimated_length, data = project)
fitted(model)
sample %>%
ggplot(aes(x = estimated_length, y = actual_length)) +
geom_point() +
geom_abline(
intercept = model$coefficients[1],
slope = model$coefficients[2],
col = "red"
)
model
library(broom)
glance(model)
tidy(model)
library(ggfortify)
autoplot(model)
library(tidyverse)
# load thea data
project <- read_csv("data/project_management.csv")
project <- project %>%
select(-...1)
# Plot the data, taking estimated_length as the independent variable and actual_length as the dependent variable.
project %>%
ggplot(aes(estimated_length, actual_length))+
geom_point()
# Calculate the correlation coefficient of estimated_length and actual_length and interpret the value you obtain.
project %>% summarise(correlation = cor(estimated_length, y = actual_length))
# Perform a simple linear regression using actual_length as the dependent variable, and estimated_length as the independent variable. Save the model object to a variable.
model <- lm(formula = actual_length ~ estimated_length, data = project)
library(modelr)
sample <- project %>%
add_predictions(model) %>%
add_residuals(model)
sample %>%
ggplot(aes(x = estimated_length))+
geom_point( aes(y = actual_length))+
geom_line(aes(y = pred), col = "red")
library(broom)
glance(model)
tidy(model)
library(ggfortify)
autoplot(model)
par(mfrow =  c(2,3))
plot(model)
hist(model$resdiduals)
par(mfrow =  c(2,3))
plot(model)
hist(model$residuals)
