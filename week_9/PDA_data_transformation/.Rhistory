library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
View(transactions)
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>% unite(date, day, month, year, sep = "/")
transactions
transactions <- transactions %>% as_date(unite(date, day, month, year, sep = "/"))
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>% as.Date(unite(date, day, month, year, sep = "/"))
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/") %>%
mutate(date = as.Date(date, format("%Y-%m-%d")))
transactions
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/") %>%
mutate(date = as.Date(date, format("%d-%m-%Y")))
transactions
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/") %>%
mutate(date = as.Date(date, format("%d-%m-%Y")))
transactions
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/")
## 2
Load in the toys data and:
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "")
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "") %>% mutate(date = as.Date(date, format = "%d-%m-%Y"))
transactions
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "") %>% mutate(date = as.Date(date, format = "%d%m%Y"))
transactions
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "")
library(tidyverse)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/")
transactions
toys <- read_csv("raw_data/toys.csv")
toys
toys <- read_csv("raw_data/toys.csv")
toys<- toys %>% mutate(weight = str_remove(wieght, [a-z])
toys<- toys %>% mutate(weight = str_remove(wieght, [a-z]))
toys <- read_csv("raw_data/toys.csv")
toys<- toys %>% mutate(weight = str_remove(weight, [a-z]))
toys
toys <- read_csv("raw_data/toys.csv")
toys<- toys %>% mutate(weight = str_remove(weight, "[a-z]"))
toys
toys <- read_csv("raw_data/toys.csv")
toys<- toys %>% mutate(weight = str_remove(weight, "[ a-z]"))
toys <- toys %>% mutate(weight = str_remove(weight, "[ a-z]")) %>% mutate(weight= as.numeric(weight))
toys
toys <- read_csv("raw_data/toys.csv")
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[ a-z]")))
toys <- read_csv("raw_data/toys.csv")
toys <- toys %>% mutate(weight = str_remove(weight, "[ a-z]"),
weight= as.numeric(weight))
toys
toys <- read_csv("raw_data/toys.csv")
toys <- toys %>% mutate(weight = str_remove(weight, "[ a-z]"),
weight= as.numeric(weight))
toys <- read_csv("raw_data/toys.csv")
toys <- read_csv("raw_data/toys.csv")
toys <- toys %>% mutate(weight = str_remove(weight, "[a-z]"),
weight= as.numeric(weight))
toy
toys
toys <- read_csv("raw_data/toys.csv")
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]"))
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
toys
toys<- toys %>%
separate(product, into = c("product_name", "product_title"), sep = "-")
toys
# read in toys csv
toys <- read_csv("raw_data/toys.csv")
# convert weight column into a numeric one
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
# split info from product column into product_name and product_title
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = "-")
toys
toys <- read_csv("raw_data/toys.csv")
# convert weight column into a numeric one
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
toys
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = " - ")
toys
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = " - ") %>%
mutate(product_name = str_remove_all(product_name, "\\s"),
product_title = str_remove_all(product_title, "\\s"))
# read in toys csv
toys <- read_csv("raw_data/toys.csv")
# convert weight column into a numeric one
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
# split info from product column into product_name and product_title
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = " - ") %>%
mutate(product_name = str_remove_all(product_name, "\\s"),
product_title = str_remove_all(product_title, "\\s"))
toys
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- mutate(description = str_remove(description, "[A-Za-z]:\\s"))
quality_labels
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>% mutate(description = str_remove(description, "[A-Za-z]:\\s"))
quality_labels
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>% mutate(description = str_remove(description, "+[A-Za-z]:\\s"))
# read in toys csv
toys <- read_csv("raw_data/toys.csv")
# convert weight column into a numeric one
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
# split info from product column into product_name and product_title
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = " - ") %>%
# and remove any white spaces if thereare any
mutate(product_name = str_remove_all(product_name, "\\s*"),
product_title = str_remove_all(product_title, "\\s*"))
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>% mutate(description = str_remove(description, "\\bQuality:\\s*"))
quality_labels
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>%
mutate(description = str_remove(description, "\\bQuality:\\s*")) %>%
mutate(description = case_when(
description == "Awesome" ~ "Good",
description == "Very Awesome" ~ "Very Good",
description == "Awful" ~ "Bad",
TRUE ~ description
))
quality_labels
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>%
mutate(description = str_remove(description, "\\bQuality:\\s*")) %>%
mutate(description = case_when(
description == "Awesome" ~ "Good",
description == "Very Awesome" ~ "Very Good",
description == "Awful" ~ "Bad",
description == "Very Awful" ~ "Very Bad"
TRUE ~ description
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>%
mutate(description = str_remove(description, "\\bQuality:\\s*")) %>%
mutate(description = case_when(
description == "Awesome" ~ "Good",
description == "Very Awesome" ~ "Very Good",
description == "Awful" ~ "Bad",
description == "Very Awful" ~ "Very Bad"
TRUE ~ description
quality_labels <- read_csv("raw_data/quality.csv")
quality_labels <- quality_labels %>%
mutate(description = str_remove(description, "\\bQuality:\\s*")) %>%
mutate(description = case_when(
description == "Awesome" ~ "Good",
description == "Very Awesome" ~ "Very Good",
description == "Awful" ~ "Bad",
description == "Very Awful" ~ "Very Bad",
TRUE ~ description
))
quality_labels
library(fs)
data_dir <- "raw_data"
dir_ls(data_dir)
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "[a-z]\\-\\.csv$")
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\bcustomers.csv$")
read_csv(csv_files)
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\.csv$")
read_csv(csv_files)
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\.csv$")
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "_customers.csv\\")
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\_customers.csv")
csv_files
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\_customers.csv$")
csv_files
csv_files %>%
map_dfr(read_csv)
australia_cust < - read_csv("raw_data/australia_customers.csv")
australia_cust < - read_csv("raw_data/australia_customers.csv")
australia_cust <- read_csv("raw_data/australia_customers.csv")
View(australia_cust)
View(australia_cust)
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\_customers.csv$")
csv_files %>%
map_dfr(read_csv)
customers <- csv_files %>%
map_dfr(read_csv)
View(customers)
customers
customers %>% select(customer_age, customer_height_cm, customer_weight_kg) %>% is.na(customer_age)
customers %>% select(customer_age, customer_height_cm, customer_weight_kg) %>% is.na(customer_age)
is.na(customers$customer_age)
customers %>% select(customer_age, customer_height_cm, customer_weight_kg) %>% is.na(customer_age)
ustomers %>% summarise(missing_age = sum(is.na(customer_age)))
customers %>% summarise(missing_age = sum(is.na(customer_age)))
customers %>% summarise(missing_age = sum(is.na(customer_age)))
customers %>% summarise(missing_height = sum(is.na(customer_height_cm)))
customers %>% summarise(missing_age = sum(is.na(customer_age)))
customers %>% summarise(missing_height = sum(is.na(customer_height_cm)))
customers %>% summarise(missing_weight = sum(is.na(customer_weight_kg)))
customers
customers %>%
group_by(customer_country, customer_gender) %>%
mutate(mean_age = mean(customer_age),
mean_weight = mean(customer_weight_kg),
mean_height = mean(customer_height_cm))
customers_1 <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(mean_age = mean(customer_age),
mean_weight = mean(customer_weight_kg),
mean_height = mean(customer_height_cm))
customers_1 <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(mean_age = mean(customer_age),
mean_weight = mean(customer_weight_kg),
mean_height = mean(customer_height_cm)) %>%
if_else(is.na(customer_age), mean_age, customer_age)
?coalesce()
customers_1 <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(customer_age = coalesce(customer_age,mean(customer_age, na.rm = TRUE)))
customers_1
customers_1 <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(customer_age = coalesce(customer_age,median(customer_age, na.rm = TRUE)))
mean_weight = mean(customer_weight_kg),
customers_1 <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(customer_age = coalesce(customer_age,median(customer_age, na.rm = TRUE)))
customers_1
?whenre()
?where()
?where()
customers_1 <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(customer_age = coalesce(customer_age,median(customer_age, na.rm = TRUE)),
customer_weight_kg = coalesce(customer_weight_kg, median(customer_weight_kg, na.rm = TRUE)),
customer_height_cm = coalesce(customer_height_cm, median(customer_height_cm, na.rm = TRUE)))
customers_1
customers <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(across(
c(customer_age, customer_height_cm, customer_weight_kg),
~ coalesce(., median(., na.rm = TRUE))
)
)
View(customers)
View(customers)
View(customers_1)
View(customers_1)
View(toys)
View(quality_labels)
quality <- read_csv("raw_data/quality.csv")
quality <- quality_labels %>%
mutate(description = str_remove(description, "\\bQuality:\\s*")) %>%
mutate(description = case_when(
description == "Awesome" ~ "Good",
description == "Very Awesome" ~ "Very Good",
description == "Awful" ~ "Bad",
description == "Very Awful" ~ "Very Bad",
TRUE ~ description
))
View(quality)
![](images/diagram_pda.png)
?full_join()
toy_quality <- full_join(toys, quality, by = id)
toy_quality <- full_join(toys, quality, by = NULL)
toy_quality <- full_join(toys, quality, by = id)
toy_quality <- full_join(toys, quality, by = "id")
toy_quality <- full_join(toys, quality, by = c("quality" = "id"))
toy_quality
toy_quality <- full_join(toys, quality, by = c("quality" = "id"))
toy_transactions <- full_join(toy_quality, transactions, by = c("id" = "toy_id"))
toy_quality <- full_join(toys, quality, by = c("quality" = "id"))
toy_transactions <- full_join(toy_quality, transactions, by = c("id" = "toy_id"))
toys_joined <- full_join(toy_transactions, customers, by = "customer_id" = "id")
toys_joined <- full_join(toy_transactions, customers, by = c("customer_id" = "id"))
toy_quality <- full_join(toys, quality, by = c("quality" = "id"))
toy_transactions <- full_join(toy_quality, transactions, by = c("id" = "toy_id"))
toys_joined <- full_join(toy_transactions, customers, by = c("customer_id" = "id"))
toys_joined
customers_joined
toys_joined
toys_joined %>% select(-c(first_name, last_name))
toys_joined <- toys_joined %>% select(-c(first_name, last_name))
? write_csv()
write_csv(toys_joined, "toys_joined.csv")
library(tidyverse)
knitr::opts_chunk$set(
message = FALSE,     # Hide messages
warning = FALSE      # Hide warnings
)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/")
library(tidyverse)
knitr::opts_chunk$set(
message = FALSE,     # Hide messages
warning = FALSE      # Hide warnings
)
transactions <- read_csv("raw_data/toy_transactions.csv")
transactions <- transactions %>%
unite(date, day, month, year, sep = "/")
# read in toys csv
toys <- read_csv("raw_data/toys.csv")
# convert weight column into a numeric one
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
# split info from product column into product_name and product_title
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = " - ") %>%
# and remove any white spaces if thereare any
mutate(product_name = str_remove_all(product_name, "\\s*"),
product_title = str_remove_all(product_title, "\\s*"))
knitr::opts_chunk$set(
message = FALSE,     # Hide messages
warning = FALSE)     # Hide warnings
# read in toys csv
toys <- read_csv("raw_data/toys.csv")
# convert weight column into a numeric one
toys <- toys %>% mutate(weight = as.numeric(str_remove(weight, "[a-z]")))
# split info from product column into product_name and product_title
toys <- toys %>%
separate(product, into = c("product_name", "product_title"), sep = " - ") %>%
# and remove any white spaces if thereare any
mutate(product_name = str_remove_all(product_name, "\\s*"),
product_title = str_remove_all(product_title, "\\s*"))
knitr::opts_chunk$set(
message = FALSE,     # Hide messages
warning = FALSE)     # Hide warnings
quality <- read_csv("raw_data/quality.csv")
quality <- quality %>%
mutate(description = str_remove(description, "\\bQuality:\\s*")) %>%
mutate(description = case_when(
description == "Awesome" ~ "Good",
description == "Very Awesome" ~ "Very Good",
description == "Awful" ~ "Bad",
description == "Very Awful" ~ "Very Bad",
TRUE ~ description
))
knitr::opts_chunk$set(
message = FALSE,     # Hide messages
warning = FALSE)     # Hide warnings
library(fs)
data_dir <- "raw_data" # load folder containg all the files of my interest
dir_ls(data_dir) # check what files are in the raw_data folder
# as I am not interest in all teh files from the folder I need to thik about regex pattern that would help me choose only the ones that I am interested in.
csv_files <- dir_ls(data_dir, regexp = "\\_customers.csv$")
# bind all the datasets together into one big customers one
customers <- csv_files %>%
map_dfr(read_csv)
customers <- customers %>%
group_by(customer_country, customer_gender) %>%
mutate(across(
c(customer_age, customer_height_cm, customer_weight_kg),
~ coalesce(., median(., na.rm = TRUE))
)
)
