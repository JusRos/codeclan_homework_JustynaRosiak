group_by(vore) %>%
summarise(n = n())
View(herbivores)
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
%>%
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
# summarise(herbi_mean_sleep = mean(sleep_total))
#
# herbivores
#
# omnivores <- msleep %>%
#   filter(vore == "omni") %>%
#   summarise(omni_mean_sleep = mean(sleep_total))
#
# omnivores
herbi_omni
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
null_distribution <- specify(herbi_omni ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
null_distribution <- herbi_omni %>%
specify(herbi_omni ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
select(vore, sleep_total)
null_distribution <- herbi_omni %>%
specify(herbi_omni ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
select(vore, sleep_total)
null_distribution <- herbi_omni %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
select(vore, sleep_total)
null_distribution <- herbi_omni %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "dependence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
null_distribution <- herbi_omni %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "dependence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
select(vore, sleep_total)
null_distribution <- herbi_omni %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
mutate(is_omni = ifelse(vore == "omni", TRUE, FALSE)) %>%
select(is_omni, sleep_total)
null_distribution <- herbi_omni %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
mutate(is_omni = ifelse(vore == "omni", TRUE, FALSE)) %>%
select(is_omni, sleep_total)
null_distribution <- herbi_omni %>%
specify(is_omni ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni") %>%
mutate(is_omni = ifelse(vore == "omni", TRUE, FALSE))
null_distribution <- herbi_omni %>%
specify(is_omni ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
null_distribution <- herbi_omni %>%
specify(vore ~ sleep_total) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
herbi_omni %>%
group_by(vore) %>%
summarise(n = n())
herbi_omni %>%
ggplot(aes(x = vore, y = sleep_total))+
geom_boxplot()
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
herbi_omni %>%
group_by(vore) %>%
summarise(n = n())
herbi_omni %>%
ggplot(aes(x = vore, y = sleep_total))+
geom_boxplot()
null_distribution <- herbi_omni %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
# summarise(herbi_mean_sleep = mean(sleep_total))
#
# herbivores
#
# omnivores <- msleep %>%
#   filter(vore == "omni") %>%
#   summarise(omni_mean_sleep = mean(sleep_total))
#
# omnivores
null_distribution
observed_stats <- herbi_omni %>%
specify(sleep_total ~  vore) %>%
calucalte(stat = "diff in means", order = c("herbi", "omni"))
observed_stats <- herbi_omni %>%
specify(sleep_total ~  vore) %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
observed_stats
null_distribution %>%
visualise()+
shade_p_value (obs_stat = observed_stats, direction = "right")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
p-value
p_value
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
herbi_omni %>%
group_by(vore) %>%
summarise(n = n())
herbi_omni %>%
ggplot(aes(x = vore, y = sleep_total))+
geom_boxplot()
observed_stats
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
observed_stats
null_distribution %>%
visualise()+
shade_p_value (obs_stat = observed_stats, direction = "right")
# let's calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
p_value
p_value
herbi_omni <- msleep %>%
filter(vore == "herbi" | vore == "omni")
herbi_omni %>%
group_by(vore) %>%
summarise(n = n())
herbi_omni %>%
summarise(mean_herbi = mean(vore == "herbi"))
herbi_omni %>%
summarise(mean_herbi = mean(vore == "herbi"),mean_omni = mean(vore == "omni"))
observed_stats <- herbi_omni %>%
specify(sleep_total ~  vore) %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
observed_stats
herbi_omni %>%
summarise(mean_herbi = mean(vore == "herbi"),mean_omni = mean(vore == "omni")) %>%
summarise(mean = mean_herbi - mean_omni)
observed_stats <- herbi_omni %>%
# summarise(mean_herbi = mean(vore == "herbi"),mean_omni = mean(vore == "omni")) %>%
# summarise(mean = mean_herbi - mean_omni)
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("herbi", "omni"))
observed_stats
null_distribution <- herbi_omni %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
null_distribution <- herbi_omni %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
observed_stats <- herbi_omni %>%
# summarise(mean_herbi = mean(vore == "herbi"),mean_omni = mean(vore == "omni")) %>%
# summarise(mean = mean_herbi - mean_omni)
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
observed_stats <- herbi_omni %>%
# summarise(mean_herbi = mean(vore == "herbi"),mean_omni = mean(vore == "omni")) %>%
# summarise(mean = mean_herbi - mean_omni)
specify(sleep_total ~ vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
null_distribution %>%
visualise()+
shade_p_value (obs_stat = observed_stats, direction = "right")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
p_value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
p_value
null_distribution
null_distribution %>%
visualise()+
shade_p_value (obs_stat = observed_stats, direction = "right")
null_distribution %>%
visualise(bins = 30)+
shade_p_value (obs_stat = observed_stats, direction = "right")
null_distribution %>%
visualise(bins = 30)+
shade_p_value (obs_stat = observed_stats, direction = "both")
herbi_omni %>%
ggplot(aes(x = vore, y = sleep_total))+
geom_boxplot()
observed_stats
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction("right"))
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
p_value
null_distribution %>%
visualise()+
shade_p_value (obs_stat = observed_stats, direction = "both")
# let's calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
null_distribution %>%
visualise()+
shade_p_value (obs_stat = observed_stats, direction = "right")
# let's calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
null_distribution %>%
visualise(bins = 30)+
shade_p_value (obs_stat = observed_stats, direction = "right")
# let's calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "right")
domesticated
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", TRUE, FALSE))
domesticated
null_distribution <- msleep %>%
specify(response = is_domesticated, success = TRUE) %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = TRUE) %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"))
%>%
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"))
%>%
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes", na.rm = TRUE) %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(conservation == NA, "No", is_domesticated))
%>%
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
domesticated
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == NA, "No", is_domesticated),
is_domesticated = ifelse(conservation == "domesticated", "Yes", "No")
)
domesticated
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No")) %>%
drop_na(is_domesticated)
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No")) %>%
mutate(is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
# summarise(prop = sum(is_domesticated, na.rm = TRUE)/n())
domesticated
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
domesticated
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
null_distribution
null_distribution %>%
visualise(bins = 30)
null_distribution %>%
visualise()
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()
observed_stats <- null_distribution %>%
summarise(prop = sum(is_domesticated, /n())
observed_stats
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- null_distribution %>%
summarise(prop = sum(is_domesticated /n())
null_distribution %>%
observed_stats <- null_distribution %>%
summarise(prop = sum(is_domesticated /n())
null_distribution <- domesticated %>%
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- null_distribution %>%
summarise(prop = sum(is_domesticated /n()))
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- null_distribution %>%
summarise(prop = sum(is_domesticated /n()))
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- null_distribution %>%
summarise(prop = sum(is_domesticated /n()))
observed_stats <- null_distribution %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
observed_stats <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
domesticated %>%
summarise(prop = sum(is.domesticated == "Yes")/n())
domesticated %>%
summarise(prop = sum(is_domesticated == "Yes")/n())
domesticated %>%distinct(is_domesticated)
domesticated %>%distinct(is_domesticated) %>% sumamrise(is_dometicated)
domesticated %>%distinct(is_domesticated) %>% sumamrise(is_domesticated)
domesticated %>%distinct(is_domesticated) %>% summarise(is_domesticated)
domesticated %>%group_by(is_domesticated) %>% summarise(sum = sum(is_domesticated))
domesticated %>%group_by(is_domesticated) %>% summarise(is_domesticated)
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>%group_by(is_domesticated) %>% summarise(sum(is_domesticated))
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>%group_by(is_domesticated) %>% summarise(n = count(is_domesticated))
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>%group_by(is_domesticated) %>% summarise(n = count())
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>%group_by(is_domesticated) %>% summarise(n = count())
domesticated %>% group_by(is_domesticated)
domesticated %>% distinct(is_domesticated)
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>% group_by(is_domesticated) %>% summarise(n = count())
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>% group_by(is_domesticated) %>% summarise(number = sum())
# summarise(prop = sum(is_domesticated == "Yes")/n())
domesticated
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>% group_by(is_domesticated) %>% summarise(number = count())
domesticated <- msleep %>% mutate(is_domesticated = ifelse(conservation == "domesticated", "Yes", "No"),
is_domesticated = ifelse(is.na(is_domesticated), "No", is_domesticated))
# drop_na(is_domesticated)
domesticated %>% group_by(is_domesticated) %>% summarise(number = count(.))
# summarise(prop = sum(is_domesticated == "Yes")/n())
domesticated
domesticated %>% filter(is_domesticated == "yes")
domesticated %>% filter(is_domesticated == "Yes")
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
# calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
# calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 1000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
# calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
p_value
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
# calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
null_distribution <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
observed_stats <- domesticated %>%
specify(response = is_domesticated, success = "Yes") %>%
calculate(stat = "prop")
null_distribution %>%
visualise()+
shade_p_value(obs_stat = observed_stats, direction = "both")
# calculate p-value
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stats, direction = "both")
p_value
p_value
